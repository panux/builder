//This example uses a generated makefile to compile itself
package main

import (
	"log"
	"os"

	makefile "github.com/panux/go-makefile"
)

func chkerr(err error) {
	if err != nil {
		panic(err)
	}
}

func main() {

	//open Makefile for writing
	f, err := os.OpenFile("self.mk", os.O_WRONLY|os.O_CREATE, 0600)
	if err != nil {
		log.Fatalf("Failed to open self.mk: %q\n", err.Error())
	}
	defer f.Close()

	//create Makefile builder
	b := makefile.NewBuilder()
	defer func() { //save at the end
		//write to file
		_, err = b.WriteTo(f)
		if err != nil {
			log.Fatalf("Failed to write Makefile: %q\n", err.Error())
		}
	}()

	//Add comment at the top saying that this is autogenerated
	b.Comment().
		Line("AUTOGENERATED DO NOT EDIT").
		Line("run `make` to regenerate")
	b.BlankLine()

	//add all target
	b.NewRule(makefile.RawText("all")).AddDep(makefile.RawText("self.mk")).Phony()

	//add go commands
	gobin := makefile.MakeVar("GOBIN")
	gofmt := makefile.MakeVar("GOFMT")
	goget := makefile.MakeVar("GOGET")
	gobuild := makefile.MakeVar("GOBUILD")
	b.Comment().
		Line("go commands")
	b.SetVar(gobin, makefile.RawText("go")).
		SetVarSlice(gofmt, []makefile.Text{gobin.Sub(), makefile.RawText("fmt")}).
		SetVarSlice(goget, []makefile.Text{gobin.Sub(), makefile.RawText("get")}).
		SetVarSlice(gobuild, []makefile.Text{gobin.Sub(), makefile.RawText("build")}).
		BlankLine()

	//add gopath rules & variable
	gopath := makefile.MakeVar("GOPATH")
	b.Comment().
		Line("GOPATH defaults to a subdir of this directory called gopath").
		Line("it will be created if it does not exist")
	b.SetVar(gopath, makefile.JoinText("/",
		makefile.NewCmd(makefile.RawText("pwd")).Sub(),
		makefile.FilePath("gopath"),
	)).
		NewRule(gopath.Sub()).
		NewCmd("mkdir").
		AddArg(makefile.RawText("-p")).
		AddArg(gopath.Sub())
	shgopath := makefile.ShellVar(gopath)
	b.BlankLine()

	//add fmt target
	b.NewRule(makefile.RawText("fmt")).Print(makefile.RawText("Formatting")).
		AddCmd(
			makefile.NewCmd(gofmt.Sub()).
				SetEnv(shgopath, gopath.Sub()).
				SetNoPrint(),
		).Phony()
	defer b.AppendPhony()

	//add .godeps target
	godeps := makefile.RawText(".godeps")
	b.NewRule(godeps).AddDep(gopath.Sub()).Print(makefile.RawText("Running go get")).
		AddCmd(
			makefile.NewCmd(goget.Sub()).
				SetEnv(shgopath, gopath.Sub()).
				AddArg(makefile.FilePath("github.com/panux/go-makefile")).
				SetNoPrint(),
		).
		NewCmd("touch").AddArg(makefile.Target).SetNoPrint()

	//add build target
	b.NewRule(makefile.ExtPattern("o")).
		AddDep(makefile.ExtPattern("go")).
		AddDep(godeps).
		Print(makefile.JoinText(" ",
			makefile.RawText("GOBUILD"),
			makefile.Dep1,
		)).
		AddCmd(
			makefile.NewCmd(gobuild.Sub()).
				AddArgSlice([]makefile.Text{
					makefile.RawText("-o"),
					makefile.Target,
					makefile.Dep1,
				}).
				SetEnv(shgopath, gopath.Sub()).
				SetNoPrint(),
		)

	//add self.mk target
	b.NewRule(makefile.RawText("self.mk")).
		AddDep(makefile.RawText("self.o")).Print(makefile.RawText("Regenerating makefile")).NewCmd("./self.o").SetNoPrint()
}
